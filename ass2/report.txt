If we shuffle the board permutation {1,2,3,4,5,6,7,8} we can find a desired permutation (i.e. no attacking pairs) very quicly, usually less than 500 shuffles.

Personally I think a genetic algorithm is unsuitable for this problem it's overkill. A naive GA introduces far more random variance which ensures it takes far longer than the simpler method described above.

But nonetheless my goal is to create a genetic algorithm that will find a solution which rivals the "simple" approach above.



Create a board with only 1 Queen per column and 1 Queen per row. ensuring no vertical or horizontal attacks.
The given data structure ensures vertical collisions are impossible
Preventing random board permutions containing duplicate entries, we ensure that the every number in the range [0,BOARD_SIZE), is in the array.
e.g {0,1,2,3,4,5,6,7} is a permuttion where no 2 queens ocucpy the same row or column.

for such a small board size (8) merely shuffling columns can find a solution in less than a few milliseconds.

Using a genetic algorithm to solve such a small problem is over-kill.


crossover
single split random crossover
       fails with probability 0.45028...
single split crossover, derived from parents fitness
       fails with probability 0.25567...
uniformly distributed crossover, derived from parents fitness
       fails with probability 0.30652... 
three parent crossover
       fails with probability 0.34903...

I have chosen a single split crossover, where the splitpoint is a derived from a function of the parents fitness.
because this method was least likely to cause population stagnation when mutation fails.
